/*
 * MainWindow.java
 * 
 *  Copyright (C) 2008-2009 Giuseppe Profiti
 *  
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 */
package solowiki;

import info.bliki.htmlcleaner.TagToken;
import info.bliki.wiki.model.Configuration;
import info.bliki.wiki.model.WikiModel;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.event.DocumentEvent;
import javax.swing.text.html.HTML;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import solowiki.internal.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import solowiki.internal.MyCompoundEdit;
import javax.swing.undo.UndoManager;

/**
 *
 * @author Giuseppe Profiti
 */
public class MainWindow extends javax.swing.JFrame {

    AboutDialog aboutDialog;
    //UpdatesDialog updateDialog;
    //WikiParser parser;
    private File currentFile;
//    protected UndoManager undoManager;
    public static FileNameExtensionFilter txtFilter =
            new FileNameExtensionFilter("*.txt", "txt");
    public static FileNameExtensionFilter htmlFilter =
            new FileNameExtensionFilter("*.html, *.htm", "html", "htm");
    public static FileNameExtensionFilter pdfFilter =
            new FileNameExtensionFilter("*.pdf", "pdf");
    public static FileNameExtensionFilter imgFilter =
            new FileNameExtensionFilter("PNG, JPEG", "png", "jpg", "jpeg");
    ConfigurableBundle configurableValues;
    OptionsDialog optionsDialog;
    Vector<File> imageFiles;
    boolean saving = false;
    solowiki.internal.FileManager fileManager;
    AddImageAction addImageAction;
    BoldTextAction boldTextAction;
    BracesAction bracesAction;
    CheckLinksAction checkLinksAction;
    CopyAction copyAction;
    CutAction cutAction;
    H2TextAction h2TextAction;
    H3TextAction h3TextAction;
    ItalicsTextAction italicsTextAction;
    NewFileAction newFileAction;
    NowikiTextAction nowikiTextAction;
    OpenFileAction openFileAction;
    PasteAction pasteAction;
    PreviewAction previewAction;
    SaveFileAction saveFileAction;
    UnderlineTextAction underlineTextAction;
    //   WikilinkAction wikilinkAction;
    WikiModel lastModel;
    RemoteOperations remoteOps;
    LinkCheckDialog lcdiag;
    FormatImageLinkAction formatImageLinkAction;
    UndoManager undoManager;
    UndoAction undoAction;
    RedoAction redoAction;
    OpenRemoteAction openRemoteAction;
    String saveBuffer;
    WikiWorker worker;
//    Logger logger;

    /** Creates new form MainWindow */
    public MainWindow() {
//        logger = Logger.getLogger(MainWindow.class.getName());
        configurableValues = new ConfigurableBundle();

        undoManager = new UndoManager();
        setupActions();

        initComponents();
        aboutDialog = new AboutDialog(this, true);
        optionsDialog = new OptionsDialog(this, true, configurableValues);
        //updateDialog = new UpdatesDialog(this, true);
        //parser = new WikiParser();
        currentFile = null;
        imageFiles = new Vector<File>();
        fileManager = new solowiki.internal.FileManager(System.getProperty("java.io.tmpdir"));
        lastModel = null;
        remoteOps = new RemoteOperations(configurableValues.getString("wiki.api.url"));
        lcdiag = new LinkCheckDialog(MainWindow.this, false);
        editorPane.getDocument().addUndoableEditListener(new MyUndoableEditListener());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exportMenu = new javax.swing.JMenu();
        savePDFMenuItem = new javax.swing.JMenuItem();
        editorPopupMenu = new javax.swing.JPopupMenu();
        popupCutMenuItem = new javax.swing.JMenuItem();
        popupCopyMenuItem = new javax.swing.JMenuItem();
        popupPasteMenuItem = new javax.swing.JMenuItem();
        popupSelectAllMenuItem = new javax.swing.JMenuItem();
        fileChooser = new javax.swing.JFileChooser();
        findDialog = new javax.swing.JDialog();
        searchField = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        replaceField = new javax.swing.JTextField();
        replaceLabel = new javax.swing.JLabel();
        regexCheckBox = new javax.swing.JCheckBox();
        findButton = new javax.swing.JButton();
        replaceButton = new javax.swing.JButton();
        replaceAllButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        wrapCheckBox = new javax.swing.JCheckBox();
        toolBar = new javax.swing.JToolBar();
        newFileButton = new ToolbarButton();
        openFileButton = new ToolbarButton();
        saveFileButton = new ToolbarButton();
        addImageButton = new ToolbarButton();
        endFileButtonsSeparator = new javax.swing.JToolBar.Separator();
        bracesButton = new javax.swing.JButton();
        boldTextButton = new ToolbarButton();
        italicsTextButton = new ToolbarButton();
        underlineButton = new ToolbarButton();
        h2Button = new javax.swing.JButton();
        h3Button = new javax.swing.JButton();
        nowikiButton = new javax.swing.JButton();
        formatImageLinkButton = new javax.swing.JButton();
        endEditButtonsSeparator = new javax.swing.JToolBar.Separator();
        previewButton = new ToolbarButton();
        checkLinksButton = new ToolbarButton();
        tabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputPane = new javax.swing.JEditorPane();
        statusPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        statusLabel = new javax.swing.JLabel();
        sizeByteLabel = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new MenuItem();
        openMenuItem = new MenuItem();
        openRemoteMenuItem = new MenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        saveMenuItem = new MenuItem();
        saveAsMenuItem = new MenuItem();
        saveHTMLMenuItem = new MenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        cutMenuItem = new MenuItem();
        copyMenuItem = new MenuItem();
        pasteMenuItem = new MenuItem();
        eraseAllMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        selectAllMenuItem = new javax.swing.JMenuItem();
        findMenuItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        optionsMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        incCharMenuItem = new javax.swing.JMenuItem();
        decCharMenuItem = new javax.swing.JMenuItem();
        formatMenu = new javax.swing.JMenu();
        boldMenuItem = new MenuItem();
        italicsMenuItem = new MenuItem();
        underlineMenuItem = new MenuItem();
        nowikiMenuItem = new MenuItem();
        actionMenu = new javax.swing.JMenu();
        previewMenuItem = new MenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        htmlMenuItem = new javax.swing.JCheckBoxMenuItem();
        onlineCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        contentsMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        checkUpdatesItem = new javax.swing.JMenuItem();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("solowiki/resources/MainWindow"); // NOI18N
        exportMenu.setText(bundle.getString("filemenu.exportMenu")); // NOI18N

        savePDFMenuItem.setAction(saveFileAction);
        savePDFMenuItem.setText(bundle.getString("filemenu.exportMenu.savePDFMenu")); // NOI18N
        exportMenu.add(savePDFMenuItem);

        popupCutMenuItem.setAction(cutAction);
        editorPopupMenu.add(popupCutMenuItem);

        popupCopyMenuItem.setAction(copyAction);
        editorPopupMenu.add(popupCopyMenuItem);

        popupPasteMenuItem.setAction(pasteAction);
        editorPopupMenu.add(popupPasteMenuItem);

        popupSelectAllMenuItem.setText(bundle.getString("editmenu.selectallmenuitem")); // NOI18N
        popupSelectAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAll(evt);
            }
        });
        editorPopupMenu.add(popupSelectAllMenuItem);

        findDialog.setTitle(bundle.getString("editmenu.findreplace")); // NOI18N
        findDialog.setAlwaysOnTop(true);
        findDialog.setLocationByPlatform(true);

        searchLabel.setText(bundle.getString("search.findButton")); // NOI18N

        replaceLabel.setText(bundle.getString("search.replaceButton")); // NOI18N

        regexCheckBox.setText(bundle.getString("search.regexBox")); // NOI18N

        findButton.setText(bundle.getString("search.findButton")); // NOI18N
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findText(evt);
            }
        });

        replaceButton.setText(bundle.getString("search.replaceButton")); // NOI18N
        replaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceText(evt);
            }
        });

        replaceAllButton.setText(bundle.getString("search.replaceAllButton")); // NOI18N
        replaceAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceAll(evt);
            }
        });

        closeButton.setText(bundle.getString("close")); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFindDiag(evt);
            }
        });

        wrapCheckBox.setText(bundle.getString("search.wraparound")); // NOI18N

        javax.swing.GroupLayout findDialogLayout = new javax.swing.GroupLayout(findDialog.getContentPane());
        findDialog.getContentPane().setLayout(findDialogLayout);
        findDialogLayout.setHorizontalGroup(
            findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(findDialogLayout.createSequentialGroup()
                        .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(replaceLabel)
                            .addComponent(searchLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(replaceField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)))
                    .addComponent(regexCheckBox)
                    .addComponent(wrapCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(replaceAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(replaceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(findButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        findDialogLayout.setVerticalGroup(
            findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findButton)
                    .addComponent(searchLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(replaceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(replaceLabel)
                    .addComponent(replaceButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(replaceAllButton)
                    .addComponent(regexCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(findDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton)
                    .addComponent(wrapCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("solowiki/resources/SoloWikiApp"); // NOI18N
        setTitle(bundle1.getString("Application.title")); // NOI18N
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                askToSave(evt);
            }
        });

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        newFileButton.setAction(newFileAction);
        newFileButton.setFocusable(false);
        newFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(newFileButton);

        openFileButton.setAction(openFileAction);
        openFileButton.setFocusable(false);
        openFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(openFileButton);

        saveFileButton.setAction(saveFileAction);
        saveFileButton.setFocusable(false);
        saveFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(saveFileButton);

        addImageButton.setAction(addImageAction);
        addImageButton.setFocusable(false);
        addImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(addImageButton);
        toolBar.add(endFileButtonsSeparator);

        bracesButton.setAction(bracesAction);
        bracesButton.setFocusable(false);
        bracesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bracesButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(bracesButton);

        boldTextButton.setAction(boldTextAction);
        boldTextButton.setFocusable(false);
        boldTextButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boldTextButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(boldTextButton);

        italicsTextButton.setAction(italicsTextAction);
        italicsTextButton.setFocusable(false);
        italicsTextButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        italicsTextButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(italicsTextButton);

        underlineButton.setAction(underlineTextAction);
        underlineButton.setFocusable(false);
        underlineButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        underlineButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(underlineButton);

        h2Button.setAction(h2TextAction);
        h2Button.setFocusable(false);
        h2Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        h2Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(h2Button);

        h3Button.setAction(h3TextAction);
        h3Button.setFocusable(false);
        h3Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        h3Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(h3Button);

        nowikiButton.setAction(nowikiTextAction);
        nowikiButton.setFocusable(false);
        nowikiButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nowikiButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(nowikiButton);

        formatImageLinkButton.setAction(formatImageLinkAction);
        formatImageLinkButton.setFocusable(false);
        formatImageLinkButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        formatImageLinkButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(formatImageLinkButton);
        toolBar.add(endEditButtonsSeparator);

        previewButton.setAction(previewAction);
        previewButton.setFocusable(false);
        previewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        previewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(previewButton);

        checkLinksButton.setAction(checkLinksAction);
        checkLinksButton.setFocusable(false);
        checkLinksButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        checkLinksButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(checkLinksButton);

        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        editorPane.setComponentPopupMenu(editorPopupMenu);
        jScrollPane1.setViewportView(editorPane);
        editorPane.getDocument().addDocumentListener(new MainWindow.SizeUpdater());

        tabbedPane.addTab("Edit", jScrollPane1);

        outputPane.setContentType("text/html"); // NOI18N
        outputPane.setEditable(false);
        outputPane.setComponentPopupMenu(editorPopupMenu);
        outputPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                MainWindow.this.mouseMoved(evt);
            }
        });
        jScrollPane2.setViewportView(outputPane);

        tabbedPane.addTab("Output", jScrollPane2);

        statusLabel.setText(bundle.getString("statusReady")); // NOI18N

        sizeByteLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sizeByteLabel.setText("byte"); // NOI18N

        sizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 503, Short.MAX_VALUE)
                .addComponent(sizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sizeByteLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(sizeByteLabel)
                    .addComponent(sizeLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setText(bundle.getString("filemenu")); // NOI18N

        newMenuItem.setAction(newFileAction);
        fileMenu.add(newMenuItem);

        openMenuItem.setAction(openFileAction);
        fileMenu.add(openMenuItem);

        openRemoteMenuItem.setAction(openRemoteAction);
        fileMenu.add(openRemoteMenuItem);
        fileMenu.add(jSeparator5);

        saveMenuItem.setAction(saveFileAction);
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setAction(saveFileAction);
        saveAsMenuItem.setText(bundle.getString("filemenu.saveasmenuitem")); // NOI18N
        fileMenu.add(saveAsMenuItem);

        saveHTMLMenuItem.setAction(saveFileAction);
        saveHTMLMenuItem.setText(bundle.getString("filemenu.saveHTML")); // NOI18N
        fileMenu.add(saveHTMLMenuItem);
        fileMenu.add(jSeparator6);

        exitMenuItem.setText(bundle.getString("filemenu.exitmenuitem")); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText(bundle.getString("editmenu")); // NOI18N

        undoMenuItem.setAction(undoAction);
        editMenu.add(undoMenuItem);

        redoMenuItem.setAction(redoAction);
        editMenu.add(redoMenuItem);
        editMenu.add(jSeparator8);

        cutMenuItem.setAction(cutAction);
        editMenu.add(cutMenuItem);

        copyMenuItem.setAction(copyAction);
        copyMenuItem.setAccelerator(copyMenuItem.getAccelerator());
        editMenu.add(copyMenuItem);

        pasteMenuItem.setAction(pasteAction);
        pasteMenuItem.setAccelerator(pasteMenuItem.getAccelerator());
        pasteMenuItem.setText(pasteMenuItem.getText());
        editMenu.add(pasteMenuItem);

        eraseAllMenuItem.setText(bundle.getString("editmenu.eraseAllMenuItem")); // NOI18N
        eraseAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseAll(evt);
            }
        });
        editMenu.add(eraseAllMenuItem);
        editMenu.add(jSeparator3);

        selectAllMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_NUMPAD5, java.awt.event.InputEvent.CTRL_MASK));
        selectAllMenuItem.setText(bundle.getString("editmenu.selectallmenuitem")); // NOI18N
        selectAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAll(evt);
            }
        });
        editMenu.add(selectAllMenuItem);

        findMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        findMenuItem.setText(bundle.getString("editmenu.findreplace")); // NOI18N
        findMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAndReplace(evt);
            }
        });
        editMenu.add(findMenuItem);
        editMenu.add(jSeparator7);

        optionsMenuItem.setText(bundle.getString("options.menutitem")); // NOI18N
        optionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showOptionsDialog(evt);
            }
        });
        editMenu.add(optionsMenuItem);

        menuBar.add(editMenu);

        viewMenu.setText(bundle.getString("viewmenu")); // NOI18N

        incCharMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PLUS, java.awt.event.InputEvent.CTRL_MASK));
        incCharMenuItem.setText(bundle.getString("viewmenu.incfontmenu")); // NOI18N
        incCharMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incCharSize(evt);
            }
        });
        viewMenu.add(incCharMenuItem);

        decCharMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_MASK));
        decCharMenuItem.setText(bundle.getString("viewmenu.decfontmenu")); // NOI18N
        decCharMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decCharSize(evt);
            }
        });
        viewMenu.add(decCharMenuItem);

        menuBar.add(viewMenu);

        formatMenu.setText(bundle.getString("format")); // NOI18N

        boldMenuItem.setAction(boldTextAction);
        formatMenu.add(boldMenuItem);

        italicsMenuItem.setAction(italicsTextAction);
        formatMenu.add(italicsMenuItem);

        underlineMenuItem.setAction(underlineTextAction);
        formatMenu.add(underlineMenuItem);

        nowikiMenuItem.setAction(nowikiTextAction);
        formatMenu.add(nowikiMenuItem);

        menuBar.add(formatMenu);

        actionMenu.setText(bundle.getString("actionmenu")); // NOI18N

        previewMenuItem.setAction(previewAction);
        actionMenu.add(previewMenuItem);
        actionMenu.add(jSeparator2);

        htmlMenuItem.setText(bundle.getString("actionmenu.showHTMLmenuitem")); // NOI18N
        htmlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleHTML(evt);
            }
        });
        actionMenu.add(htmlMenuItem);

        onlineCheckBoxMenuItem.setText(bundle.getString("workOnline")); // NOI18N
        onlineCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineCheckBoxMenuItemActionPerformed(evt);
            }
        });
        actionMenu.add(onlineCheckBoxMenuItem);

        menuBar.add(actionMenu);

        helpMenu.setText(bundle.getString("helpmenu")); // NOI18N

        aboutMenuItem.setText(bundle.getString("helpmenu.aboutmenuitem")); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAbout(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        contentsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        contentsMenuItem.setText(bundle.getString("helpmenu.helpcontentsitem")); // NOI18N
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHelp(evt);
            }
        });
        helpMenu.add(contentsMenuItem);
        helpMenu.add(jSeparator4);

        checkUpdatesItem.setText(bundle.getString("helpmenu.checkUpdates")); // NOI18N
        checkUpdatesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCheckUpdatesDialog(evt);
            }
        });
        helpMenu.add(checkUpdatesItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (undoManager.canUndoOrRedo()) {
            wantToSave(evt);
        }
        aboutDialog.dispose();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void showAbout(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAbout
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_showAbout

    private void toggleHTML(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleHTML
        toggleHTML();
        statusLabel.setText(
                java.util.ResourceBundle.getBundle(
                "solowiki/resources/MainWindow").getString("outputType")
                + outputPane.getContentType());
    }//GEN-LAST:event_toggleHTML

    private void toggleHTML() {
        String type = outputPane.getContentType();
        String text = outputPane.getText();
        if (type.equalsIgnoreCase("text/html")) {
            outputPane.setContentType("text/plain");
        } else {
            outputPane.setContentType("text/html");
        }
        outputPane.setText(text);
    }

    /**
     * Update the status bar text when the mouse is over a link.
     * @param evt
     */
    private void mouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseMoved
        JEditorPane editor = (JEditorPane) evt.getSource();
        int pos = editor.viewToModel(evt.getPoint());
        if (pos >= 0) {
            javax.swing.text.Document doc = editor.getDocument();
            if (doc instanceof javax.swing.text.DefaultStyledDocument) {
                javax.swing.text.DefaultStyledDocument hdoc =
                        (javax.swing.text.DefaultStyledDocument) doc;
                javax.swing.text.Element e = hdoc.getCharacterElement(pos);
                javax.swing.text.AttributeSet a = e.getAttributes();
                String href = null;

                SimpleAttributeSet t =
                        (SimpleAttributeSet) a.getAttribute(HTML.Tag.A);
                if (t != null) {
                    Object attr = t.getAttribute(HTML.Attribute.HREF);
                    // if it is a link and not an anchor
                    if (attr != null) {
                        href = attr.toString();
                    }
                }

                if (href != null) {
                    statusLabel.setText(href);
                } else {
                    statusLabel.setText("");
                }
            }
        }
    }//GEN-LAST:event_mouseMoved

    /**
     * Disable the cut and paste ability when outputPane is selected.
     * Only copy must be available.
     * @param evt
     */
    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        //editMenu.setEnabled((tabbedPane.getSelectedIndex()==0));
        boolean activated = (tabbedPane.getSelectedIndex() == 0);
        if (pasteMenuItem.getAction() != null) {
            pasteMenuItem.getAction().setEnabled(activated);
        }
        if (cutMenuItem.getAction() != null) {
            cutMenuItem.getAction().setEnabled(activated);
        }
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void showHelp(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHelp
        //HelpDialog helpdiag = new HelpDialog(null, false);
        //helpdiag.setVisible(true);
        HelpForm hp = new HelpForm();
        hp.setVisible(true);
    }//GEN-LAST:event_showHelp

    private void selectAll(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAll
        if (tabbedPane.getSelectedIndex() == 0) {
            editorPane.selectAll();
        } else {
            outputPane.selectAll();
        }
    }//GEN-LAST:event_selectAll

    private void findAndReplace(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAndReplace
        findDialog.pack();
        findDialog.setVisible(true);
    }//GEN-LAST:event_findAndReplace

    private void closeFindDiag(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFindDiag
        findDialog.setVisible(false);
    }//GEN-LAST:event_closeFindDiag

    private void replaceText(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceText
        String text = searchField.getText();
        String newtext = replaceField.getText();
        if (text.length() > 0) {
            editorPane.setText(
                    StringUtils.myReplace(editorPane.getText(), text, newtext,
                    true, regexCheckBox.isSelected()));
        }
    }//GEN-LAST:event_replaceText

    private void replaceAll(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceAll
        String text = searchField.getText();
        String newtext = replaceField.getText();
        if (text.length() > 0) {
            editorPane.setText(
                    StringUtils.myReplace(editorPane.getText(), text, newtext,
                    false, regexCheckBox.isSelected()));
        }
    }//GEN-LAST:event_replaceAll

    private void findText(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findText
        String searchText = searchField.getText();
        String text = editorPane.getText();
        if (searchText.length() > 0) {
            int currentpos = editorPane.getCaretPosition();
            currentpos = StringUtils.viewToModel(currentpos, text);
            int nextpos = text.indexOf(searchText, currentpos);
            if (nextpos != -1) {
                nextpos = StringUtils.modelToView(nextpos, text);
                setCaretPosition(nextpos, searchText.length());
            } else {
                if (wrapCheckBox.isSelected()) {
                    nextpos = text.indexOf(searchText, 0);
                }
                if (nextpos != -1) {
                    nextpos = StringUtils.modelToView(nextpos, text);
                    setCaretPosition(nextpos, searchText.length());
                } else {
                    findDialog.setAlwaysOnTop(false);
                    JOptionPane.showMessageDialog(this,
                            java.util.ResourceBundle.getBundle("solowiki/resources/MainWindow").getString("Can't_find") + " \"" + searchText + "\"",
                            java.util.ResourceBundle.getBundle("solowiki/resources/MainWindow").getString("Warning"),
                            JOptionPane.WARNING_MESSAGE);
                    findDialog.setAlwaysOnTop(true);
                }
            }
        }
    }//GEN-LAST:event_findText

    private void incCharSize(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incCharSize
        setCharSize(1.5f);
    }//GEN-LAST:event_incCharSize

    private void decCharSize(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decCharSize
        setCharSize(0.75f);
    }//GEN-LAST:event_decCharSize

    private void eraseAll(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseAll
        editorPane.setText("");
    }//GEN-LAST:event_eraseAll

    private void showCheckUpdatesDialog(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCheckUpdatesDialog
        UpdatesDialog updateDialog = new UpdatesDialog(this, true);
        updateDialog.setVisible(true);
    }//GEN-LAST:event_showCheckUpdatesDialog

    private void showOptionsDialog(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showOptionsDialog
        optionsDialog.setVisible(true);
    }//GEN-LAST:event_showOptionsDialog

    private void onlineCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlineCheckBoxMenuItemActionPerformed
        checkLinksAction.setEnabled(!checkLinksAction.isEnabled());
        openRemoteAction.setEnabled(!openRemoteAction.isEnabled());
    }//GEN-LAST:event_onlineCheckBoxMenuItemActionPerformed

    private void askToSave(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_askToSave
        if (undoManager.canUndoOrRedo()) {
            wantToSave(null);
        }
    }//GEN-LAST:event_askToSave

    private void setCharSize(float step) {
        Font f = editorPane.getFont();
        f = f.deriveFont(f.getSize2D() * step);
        editorPane.setFont(f);
    }

    /**
     * Moves the caret in the editor area to pos, selecting length
     * chars after pos. Positions are checked against current text.
     * @param pos
     * @param length
     */
    protected void setCaretPosition(int pos, int length) {
        if ((pos > -1) && ((pos + length) < editorPane.getText().length())) {
            editorPane.setCaretPosition(pos);
            editorPane.select(pos, pos + length);
        }
    }

    private void setupActions() {
        addImageAction = new AddImageAction();
        boldTextAction = new BoldTextAction();
        bracesAction = new BracesAction();
        checkLinksAction = new CheckLinksAction();
        checkLinksAction.setEnabled(false);
        copyAction = new CopyAction();
        cutAction = new CutAction();
        h2TextAction = new H2TextAction();
        h3TextAction = new H3TextAction();
        italicsTextAction = new ItalicsTextAction();
        newFileAction = new NewFileAction();
        nowikiTextAction = new NowikiTextAction();
        openFileAction = new OpenFileAction();
        pasteAction = new PasteAction();
        previewAction = new PreviewAction();
        saveFileAction = new SaveFileAction();
        underlineTextAction = new UnderlineTextAction();
//        wikilinkAction = new WikilinkAction();
        formatImageLinkAction = new FormatImageLinkAction();
        redoAction = new RedoAction();
        undoAction = new UndoAction();
        openRemoteAction = new OpenRemoteAction();
        openRemoteAction.setEnabled(false);
    }

    class CutAction extends DefaultEditorKit.CutAction {

        public CutAction() {
            super();
            putValue(NAME,
                    java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString("editmenu.cutmenuitem"));
            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_X,
                    java.awt.event.InputEvent.CTRL_MASK));
        }
    }

    //TODO make it a derived class of DefaultEditorKit.CopyAction
    class CopyAction extends AbstractAction {

        public CopyAction() {
            super(
                    java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString("editmenu.copymenuitem"),
                    null);
            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_C,
                    java.awt.event.InputEvent.CTRL_MASK));
        }

        public void actionPerformed(ActionEvent e) {
            Action a = new DefaultEditorKit.CopyAction();
            a.actionPerformed(e);
        }
    }

    //TODO make it a derived class of DefaultEditorKit.PasteAction
    class PasteAction extends AbstractAction {

        public PasteAction() {
            super(
                    java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString("editmenu.pastemenuitem"),
                    null);
            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_V,
                    java.awt.event.InputEvent.CTRL_MASK));
        }

        public void actionPerformed(ActionEvent e) {
            Action a = new DefaultEditorKit.PasteAction();
            a.actionPerformed(e);
        }
    }

    private class WikiWorker extends SwingWorker<String, Void> {

        String text = "";

        public WikiWorker(String t) {
            text = new String(t);
        }

        @Override
        public void done() {
            try {
                String genText = get();
                if (!saving) {
                    // workaround to beautyfy html code when in full view
                    boolean workaround = outputPane.getContentType().equals("text/plain");
                    if (workaround) {
                        toggleHTML();
                    }
                    outputPane.setText(genText);
                    if (workaround) {
                        toggleHTML();
                    }
                    outputPane.setCaretPosition(0);
                }
                statusLabel.setText(java.util.ResourceBundle.getBundle("solowiki/resources/MainWindow").getString("workDone"));
                // Back to default settings
                saving = false;
                fileManager.setTexImagesDir(System.getProperty("java.io.tmpdir"));
            } catch (InterruptedException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        protected String doInBackground() throws Exception {
            Configuration config = Configuration.DEFAULT_CONFIGURATION;
            java.util.Map<String, TagToken> map = config.getTokenMap();
            TeX2Image t2i = new TeX2Image(fileManager);
            map.put("math", new solowiki.internal.MathTag(t2i, !saving));
            imageFiles.clear();
            t2i.setFilenamesV(imageFiles);
            /*
            WikiModel model = new WikiModel(config, configurableValues,
            "${image}", "${title}");
             */
            SolowikiModel model = new SolowikiModel(config, configurableValues,
                    "${image}", "${title}", fileManager, saving);
            String res = model.render(text);
            lastModel = model;
            return res;
        }
    }

    private class SizeUpdater implements DocumentListener {

        public void insertUpdate(DocumentEvent e) {
            updateSizeLabel(e);
        }

        public void removeUpdate(DocumentEvent e) {
            updateSizeLabel(e);
        }

        public void changedUpdate(DocumentEvent e) {
            updateSizeLabel(e);
        }

        private void updateSizeLabel(DocumentEvent e) {
            // get the length of the actual text
            int documentLength = ((Document) e.getDocument()).getLength();
            // if the length is greater than some browser limit
            if (documentLength > 32000) {
                sizeLabel.setForeground(Color.RED);
            } else {
                sizeLabel.setForeground(Color.BLACK);
            }
            // sets the label to text size
            sizeLabel.setText(Integer.toString(documentLength));
        }
    }

    private class NewFileAction extends AbstractAction {

        public NewFileAction() {
            super(java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "filemenu.new"),
                    new javax.swing.ImageIcon(
                    MainWindow.this.getClass().getResource(
                    "/toolbarButtonGraphics/general/New16.gif")));

            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_N,
                    java.awt.event.InputEvent.CTRL_MASK));
            putValue(SHORT_DESCRIPTION, getValue(NAME));
        }

        public void actionPerformed(ActionEvent e) {
            if (undoManager.canUndoOrRedo()) {
                wantToSave(e);
            }
            createNewText("");
        }
    }

    private void createNewText(String text) {
        try {
            editorPane.setPage(this.getClass().getResource("/solowiki/resources/blank"));
            outputPane.setText("");
            editorPane.setText(text); // in case Blank was the page before calling
            clearUndoManager();
            editorPane.getDocument().addUndoableEditListener(new MyUndoableEditListener());
            currentFile = null;
            MainWindow.this.setTitle(java.util.ResourceBundle.getBundle("solowiki/resources/SoloWikiApp").getString("Application.title"));
            statusLabel.setText(java.util.ResourceBundle.getBundle("solowiki/resources/MainWindow").getString("statusReady"));
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearUndoManager() {
        undoManager.discardAllEdits();
        undoAction.updateUndoState();
        redoAction.updateRedoState();
    }

    private void wantToSave(ActionEvent e) {
        int n = JOptionPane.showConfirmDialog(
                MainWindow.this,
                java.util.ResourceBundle.getBundle(
                "solowiki/resources/MainWindow").getString(
                "savechanges"),
                java.util.ResourceBundle.getBundle(
                "solowiki/resources/MainWindow").getString(
                "Warning"),
                JOptionPane.YES_NO_OPTION);
        if (n == 0) {
            saveFileAction.actionPerformed(e);
        }
    }

    private class OpenFileAction extends AbstractAction {

        public OpenFileAction() {
            super(java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "filemenu.openmenuitem"),
                    new javax.swing.ImageIcon(
                    MainWindow.this.getClass().getResource(
                    "/toolbarButtonGraphics/general/Open16.gif")));

            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_O,
                    java.awt.event.InputEvent.CTRL_MASK));
            putValue(SHORT_DESCRIPTION, getValue(NAME));
        }

        public void actionPerformed(ActionEvent e) {
            if (undoManager.canUndoOrRedo()) {
                wantToSave(e);
            }
            try {
                File aFile = openFileDialog(txtFilter);
                if (aFile != null) {
                    clearUndoManager();
                    // set the current file
                    currentFile = aFile;
                    // set the editor content
                    editorPane.setPage(currentFile.toURI().toURL());
                    // set the listener
                    editorPane.getDocument().addUndoableEditListener(new MyUndoableEditListener());

                    // set the window title
                    MainWindow.this.setTitle("SoloWiki: " + currentFile.getName());
                    fileManager.setCwd(currentFile);
                }
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private class SaveFileAction extends AbstractAction {

        public SaveFileAction() {
            super(java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "filemenu.savemenuitem"),
                    new javax.swing.ImageIcon(
                    MainWindow.this.getClass().getResource(
                    "/toolbarButtonGraphics/general/Save16.gif")));
            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_S,
                    java.awt.event.InputEvent.CTRL_MASK));
            putValue(SHORT_DESCRIPTION, getValue(NAME));
        }

        public void actionPerformed(ActionEvent evt) {
            FileWriter fw = null;
            boolean proceed = true;
            File aFile = null;
            Object source;
            // if it's a menuitem
            if (evt != null) {
                source = evt.getSource();
            } else {
                source = saveMenuItem; // if it's the close operation
            }
            // if is a "save as" or no file has already been saved
            if ((source == saveAsMenuItem) || (source == saveHTMLMenuItem) || (currentFile == null)) {
                aFile = chooseFile(source);
            }

            if (aFile != null) {
                String text = "";
                if (source == saveHTMLMenuItem) {
                    // switch to save mode
                    saving = true;
                    // changes the path to chosen directory
                    fileManager.setCwd(aFile);
                    // generate HTML output using output dir for images
                    generatePreview(evt);
                    try {
                        text = worker.get();
                        text = "<html>\n\t<head></head>\n\t<body>\n" + text + "\t</body>\n</html>";
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ExecutionException ex) {
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    text = editorPane.getText();
                }
                if ((source != saveAsMenuItem) && (currentFile != null)) {
                    aFile = currentFile;
                }
                try {
                    /*
                    if (source == savePDFMenuItem) {
                    // generate pdf
                    PDFGenerator pdfc = new PDFGenerator(new java.net.URL("file://"));
                    try {
                    try {
                    try {
                    pdfc.create(aFile.getName(), outputPane.getText(), PDFGenerator.HEADER_TEMPLATE, PDFGenerator.FOOTER, "Created by SoloWiki", null);
                    } catch (DocumentException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    } catch (ParserConfigurationException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (FactoryConfigurationError ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SAXException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    } else {
                     * */
                    //save to file
                    fw = new FileWriter(aFile);
                    fw.write(text);
                    fw.flush();
                    statusLabel.setText(aFile + " "
                            + java.util.ResourceBundle.getBundle(
                            "solowiki/resources/MainWindow").getString(
                            "savedStatustext"));
                    if ((source != saveHTMLMenuItem) && (source != savePDFMenuItem)) {
                        MainWindow.this.setTitle(java.util.ResourceBundle.getBundle(
                                "solowiki/resources/SoloWikiApp").getString(
                                "Application.title") + ": " + aFile.getName());
                        currentFile = aFile;
                        fileManager.setCwd(currentFile);
                    } else if (source == saveHTMLMenuItem) {
                        // if there is any TeX image
                        if (imageFiles.size() > 0) {
                            // the images directory
                            String texImagesDir = fileManager.getTexImagesDir();
                            File imgdir = new File(texImagesDir);
                            imgdir.mkdir();
                            // moving the files in the dest dir
                            for (int i = 0; i < imageFiles.size(); i++) {
                                imageFiles.elementAt(i).renameTo(
                                        new File(
                                        texImagesDir + File.separator
                                        + imageFiles.elementAt(i).getName()));
                            }
                        }
                    }
                    //clears the undoManager list and deactivates the actions
                    clearUndoManager();
                    saveBuffer = "";
                    //}
                } catch (IOException ex) {
                    showUnableToSaveDialog();
                } finally {
                    try {
                        if (fw != null) {
                            fw.close();
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(
                                MainWindow.class.getName()).log(
                                Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }
    /*
    private class WikilinkAction extends AbstractAction {

    public WikilinkAction() {
    super("[[ ]]");
    }

    public void actionPerformed(ActionEvent e) {
    surroundSelectionWith("[[", "]]");
    }
    }
     */

    private class BracesAction extends AbstractAction {

        public BracesAction() {
            super("{{ }}");

        }

        public void actionPerformed(ActionEvent e) {
            surroundSelectionWith("{{", "}}", (String) getValue(NAME));
        }
    }

    private class BoldTextAction extends AbstractAction {

        public BoldTextAction() {
            super(java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "format.boldtext"),
                    new javax.swing.ImageIcon(
                    MainWindow.this.getClass().getResource(
                    "/toolbarButtonGraphics/text/Bold16.gif")));
            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_B,
                    java.awt.event.InputEvent.CTRL_MASK));
            putValue(SHORT_DESCRIPTION, getValue(NAME));
        }

        public void actionPerformed(ActionEvent e) {
            surroundSelectionWith("'''", "'''", ((String) getValue(NAME)).toLowerCase());
        }
    }

    private class ItalicsTextAction extends AbstractAction {

        public ItalicsTextAction() {
            super(java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "format.italics"),
                    new javax.swing.ImageIcon(
                    MainWindow.this.getClass().getResource(
                    "/toolbarButtonGraphics/text/Italic16.gif")));
            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_I,
                    java.awt.event.InputEvent.CTRL_MASK));
            putValue(SHORT_DESCRIPTION, getValue(NAME));
        }

        public void actionPerformed(ActionEvent e) {
            surroundSelectionWith("''", "''", ((String) getValue(NAME)).toLowerCase());
        }
    }

    private class AddImageAction extends AbstractAction {

        public AddImageAction() {
            super(java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "actionmenu.addimage"),
                    new javax.swing.ImageIcon(
                    MainWindow.this.getClass().getResource(
                    "/toolbarButtonGraphics/development/Host16.gif")));
            putValue(SHORT_DESCRIPTION, getValue(NAME));
        }

        public void actionPerformed(ActionEvent e) {
            File selected = openFileDialog(imgFilter);
            if (selected != null) {
                fileManager.addImage(selected);
                // Mediawiki stores all the files in the same dir
                // then there is no need of a full or relative path
                String filePath = selected.getName();

                String tag = configurableValues.getString("wiki.api.image1");
                //TODO the file:/// text must be thrown away in the actual html output
                editorPane.replaceSelection("[[" + tag + ":" + filePath + "]]");
            }
        }
    }

    private class H2TextAction extends AbstractAction {

        public H2TextAction() {
            super("==");
            //TODO add a shor description?
        }

        public void actionPerformed(ActionEvent e) {
            surroundSelectionWith("== ", " ==", (String) getValue(NAME));
        }
    }

    private class H3TextAction extends AbstractAction {

        public H3TextAction() {
            super("===");
            //TODO add a shor description?
        }

        public void actionPerformed(ActionEvent e) {
            surroundSelectionWith("=== ", " ===", (String) getValue(NAME));
        }
    }

    private class NowikiTextAction extends AbstractAction {

        public NowikiTextAction() {
            super("nowiki");
        }

        public void actionPerformed(ActionEvent e) {
            surroundSelectionWith("<nowiki>", "</nowiki>", (String) getValue(NAME));
        }
    }

    private class PreviewAction extends AbstractAction {

        public PreviewAction() {
            super(java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "actionmenu.previewmenuitem"),
                    new javax.swing.ImageIcon(
                    MainWindow.this.getClass().getResource(
                    "/toolbarButtonGraphics/media/Play16.gif")));
            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_ENTER,
                    java.awt.event.InputEvent.CTRL_MASK));
            putValue(SHORT_DESCRIPTION, getValue(NAME));
        }

        public void actionPerformed(ActionEvent e) {
            generatePreview(e);
        }
    }

    private class CheckLinksAction extends AbstractAction {

        public CheckLinksAction() {
            super("Links?", new javax.swing.ImageIcon(
                    MainWindow.this.getClass().getResource(
                    "/toolbarButtonGraphics/general/Search16.gif")));
            putValue(SHORT_DESCRIPTION,
                    java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "actionmenu.checklinks"));
        }

        public void actionPerformed(ActionEvent e) {
            if (lastModel != null) {
                Vector<String> encodedLinks = new Vector(lastModel.getLinks());
                Vector<String> links = new Vector(encodedLinks.size());
                for (String s : encodedLinks) {
                    links.add(Encoder.decodeHtml(s));
                }
                Vector<String> ids = remoteOps.getPageId(links);
                Vector<Vector<Object>> data = new Vector();
                for (int i = 0; i < links.size(); i++) {
                    Vector d = new Vector();
                    d.add(links.elementAt(i));
                    //TODO better management
                    //currently no id is returned for missing pages
                    //but http://www.mediawiki.org/wiki/API:Query#Missing_and_invalid_titles
                    // says that negative ids can be returned
                    d.add((ids.elementAt(i) != null));
                    data.add(d);
                }

                lcdiag.setTableData(data);
                lcdiag.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(MainWindow.this,
                        java.util.ResourceBundle.getBundle(
                        "solowiki/resources/MainWindow").getString(
                        "Warning.previewFirst"),
                        java.util.ResourceBundle.getBundle(
                        "solowiki/resources/MainWindow").getString(
                        "Warning"),
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private class UnderlineTextAction extends AbstractAction {

        public UnderlineTextAction() {
            super(java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "format.underline"),
                    new javax.swing.ImageIcon(
                    MainWindow.this.getClass().getResource(
                    "/toolbarButtonGraphics/text/Underline16.gif")));
            putValue(SHORT_DESCRIPTION, getValue(NAME));
        }

        public void actionPerformed(ActionEvent e) {
            surroundSelectionWith("<u>", "</u>", ((String) getValue(NAME)).toLowerCase());
        }
    }

    private class FormatImageLinkAction extends AbstractAction {

        public FormatImageLinkAction() {
            super("Img"); //TODO use the resource to internationalize this one
            putValue(SHORT_DESCRIPTION,
                    java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "format.ImgDescription"));
        }

        public void actionPerformed(ActionEvent e) {
            String tag = configurableValues.getString("wiki.api.image1");
            surroundSelectionWith("[[" + tag + ":", "|thumb|200px|]]", (String) getValue(SHORT_DESCRIPTION));
        }
    }

    class UndoAction extends AbstractAction {

        public UndoAction() {
            super("Undo");
            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_Z,
                    java.awt.event.InputEvent.CTRL_MASK));
            setEnabled(false);
        }

        public void actionPerformed(ActionEvent e) {
            try {
                undoManager.undo();
            } catch (CannotUndoException ex) {
                System.out.println("Unable to undo: " + ex);
                ex.printStackTrace();
            }
            updateUndoState();
            redoAction.updateRedoState();
        }

        protected void updateUndoState() {
            if (undoManager.canUndo()) {
                setEnabled(true);
                putValue(Action.NAME, undoManager.getUndoPresentationName());
            } else {
                setEnabled(false);
                putValue(Action.NAME, "Undo");
            }
        }
    }

    class RedoAction extends AbstractAction {

        public RedoAction() {
            super("Redo");
            putValue(ACCELERATOR_KEY,
                    javax.swing.KeyStroke.getKeyStroke(
                    java.awt.event.KeyEvent.VK_R,
                    java.awt.event.InputEvent.CTRL_MASK));
            setEnabled(false);
        }

        public void actionPerformed(ActionEvent e) {
            try {
                undoManager.redo();
            } catch (CannotRedoException ex) {
                System.out.println("Unable to redo: " + ex);
                ex.printStackTrace();
            }
            updateRedoState();
            undoAction.updateUndoState();
        }

        protected void updateRedoState() {
            if (undoManager.canRedo()) {
                setEnabled(true);
                putValue(Action.NAME, undoManager.getRedoPresentationName());
            } else {
                setEnabled(false);
                putValue(Action.NAME, "Redo");
            }
        }
    }

    protected class MyUndoableEditListener
            implements UndoableEditListener {

        public void undoableEditHappened(UndoableEditEvent e) {
            //Remember the edit and update the menus
            undoManager.addEdit(e.getEdit());
            undoAction.updateUndoState();
            redoAction.updateRedoState();
        }
    }

    class OpenRemoteAction extends AbstractAction {

        public OpenRemoteAction() {
            super(java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "filemenu.openremote"),
                    new javax.swing.ImageIcon(
                    MainWindow.this.getClass().getResource(
                    "/toolbarButtonGraphics/general/Import16.gif")));
            putValue(SHORT_DESCRIPTION, getValue(NAME));
        }

        public void actionPerformed(ActionEvent e) {
            String name;
            name = JOptionPane.showInputDialog(MainWindow.this,
                    java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "filemenu.openremote.insertfilename"),
                    java.util.ResourceBundle.getBundle(
                    "solowiki/resources/MainWindow").getString(
                    "filemenu.openremote"), JOptionPane.QUESTION_MESSAGE);
            if (name != null) {
                statusLabel.setText(java.util.ResourceBundle.getBundle(
                        "solowiki/resources/MainWindow").getString(
                        "parsingStarted"));
                String content = remoteOps.getPageContent(name);
                if (content != null) {
                    createNewText(content);
                } else {
                    JOptionPane.showMessageDialog(MainWindow.this,
                            java.util.ResourceBundle.getBundle(
                            "solowiki/resources/MainWindow").getString(
                            "Can't_find") + " " + name,
                            java.util.ResourceBundle.getBundle(
                            "solowiki/resources/MainWindow").getString(
                            "Warning"),
                            JOptionPane.WARNING_MESSAGE);

                }
                statusLabel.setText(java.util.ResourceBundle.getBundle(
                        "solowiki/resources/MainWindow").getString(
                        "statusReady"));
            }
        }
    }

    private void surroundSelectionWith(String before, String after, String actionName) {
        MyCompoundEdit ce = new MyCompoundEdit(actionName);
        undoManager.addEdit(ce);
        surroundSelectionWith(before, after);
        ce.end();
    }

    private void surroundSelectionWith(String before, String after) {
        String selection = editorPane.getSelectedText();
        if (selection == null) {
            selection = "";
        }
        editorPane.replaceSelection(before + selection + after);
    }

    private void generatePreview(java.awt.event.ActionEvent evt) {
        statusLabel.setText(
                java.util.ResourceBundle.getBundle(
                "solowiki/resources/MainWindow").getString("parsingStarted"));
        worker = new WikiWorker(editorPane.getText());
        worker.execute();
    }

    private File openFileDialog(FileNameExtensionFilter filter) {
        fileChooser.resetChoosableFileFilters();
        fileChooser.setFileFilter(filter);
        int res = fileChooser.showOpenDialog(MainWindow.this);
        if (res == javax.swing.JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        }
        return null;
    }

    /**
     * @deprecated 
     */
    public void changeCurrentDir() {
        String path = currentFile.getPath();
        path = path.substring(0, path.length() - currentFile.getName().length());
        fileManager.setTexImagesDir(path);
    }

    public void showUnableToSaveDialog() {
        JOptionPane.showMessageDialog(this,
                java.util.ResourceBundle.getBundle("solowiki/resources/MainWindow").getString("Unable_to_save_file."),
                java.util.ResourceBundle.getBundle("solowiki/resources/MainWindow").getString("Save_error"),
                JOptionPane.WARNING_MESSAGE);
    }

    public File chooseFile(Object source) {
        File aFile = null;
        fileChooser.resetChoosableFileFilters();

        // sets the filters
        if (source == saveHTMLMenuItem) {
            // export to html
            fileChooser.setFileFilter(htmlFilter);
            /*
            } else if (source == savePDFMenuItem) {
            // export to pdf
            fileChooser.setFileFilter(pdfFilter);
             * */
        } else {
            // save wikitext
            fileChooser.setFileFilter(txtFilter);
        }
        // workaround to clear the filename in dialog
        fileChooser.setSelectedFile(new File(""));
        int res = fileChooser.showSaveDialog(MainWindow.this);
        if (res == javax.swing.JFileChooser.APPROVE_OPTION) {
            try {
                aFile = fileChooser.getSelectedFile();
                //TODO check extension
                if (aFile.exists()) {
                    int res2 = JOptionPane.showConfirmDialog(MainWindow.this,
                            java.util.ResourceBundle.getBundle("solowiki/resources/MainWindow").getString("Overwrite_") + aFile.getName() + "?",
                            java.util.ResourceBundle.getBundle("solowiki/resources/MainWindow").getString("Warning"),
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.WARNING_MESSAGE);
                    if (res2 != JOptionPane.YES_OPTION) {
                        return null;
                    }
                } else {
                    // adds the extension if it has not been specified
                    if ((source != saveHTMLMenuItem) && (!(aFile.getName().endsWith(".txt")))) {
                        aFile = new File(aFile.getPath() + ".txt");
                    }
                    aFile.createNewFile();
                }
            } catch (IOException ex) {
                Logger.getLogger(
                        MainWindow.class.getName()).log(
                        Level.SEVERE, null, ex);
            }
        } else if (res == javax.swing.JFileChooser.ERROR_OPTION) {
            showUnableToSaveDialog();
            return null;
        } else {
            return null;
        }
        return aFile;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //TODO must be commented before release
        /*
        try {
            Logger logger = Logger.getLogger(MainWindow.class.getName());
            java.util.logging.FileHandler fh = new java.util.logging.FileHandler("solowikilog.txt");
            logger.addHandler(fh);
            logger.setLevel(Level.ALL);

        } catch (IOException iOException) {
        } catch (SecurityException securityException) {
        }
*/
        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu actionMenu;
    private javax.swing.JButton addImageButton;
    private javax.swing.JMenuItem boldMenuItem;
    private javax.swing.JButton boldTextButton;
    private javax.swing.JButton bracesButton;
    private javax.swing.JButton checkLinksButton;
    private javax.swing.JMenuItem checkUpdatesItem;
    private javax.swing.JButton closeButton;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem decCharMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JPopupMenu editorPopupMenu;
    private javax.swing.JToolBar.Separator endEditButtonsSeparator;
    private javax.swing.JToolBar.Separator endFileButtonsSeparator;
    private javax.swing.JMenuItem eraseAllMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu exportMenu;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton findButton;
    private javax.swing.JDialog findDialog;
    private javax.swing.JMenuItem findMenuItem;
    private javax.swing.JButton formatImageLinkButton;
    private javax.swing.JMenu formatMenu;
    private javax.swing.JButton h2Button;
    private javax.swing.JButton h3Button;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JCheckBoxMenuItem htmlMenuItem;
    private javax.swing.JMenuItem incCharMenuItem;
    private javax.swing.JMenuItem italicsMenuItem;
    private javax.swing.JButton italicsTextButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton newFileButton;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JButton nowikiButton;
    private javax.swing.JMenuItem nowikiMenuItem;
    private javax.swing.JCheckBoxMenuItem onlineCheckBoxMenuItem;
    private javax.swing.JButton openFileButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem openRemoteMenuItem;
    private javax.swing.JMenuItem optionsMenuItem;
    private javax.swing.JEditorPane outputPane;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem popupCopyMenuItem;
    private javax.swing.JMenuItem popupCutMenuItem;
    private javax.swing.JMenuItem popupPasteMenuItem;
    private javax.swing.JMenuItem popupSelectAllMenuItem;
    private javax.swing.JButton previewButton;
    private javax.swing.JMenuItem previewMenuItem;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JCheckBox regexCheckBox;
    private javax.swing.JButton replaceAllButton;
    private javax.swing.JButton replaceButton;
    private javax.swing.JTextField replaceField;
    private javax.swing.JLabel replaceLabel;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveFileButton;
    private javax.swing.JMenuItem saveHTMLMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem savePDFMenuItem;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JMenuItem selectAllMenuItem;
    private javax.swing.JLabel sizeByteLabel;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JButton underlineButton;
    private javax.swing.JMenuItem underlineMenuItem;
    private javax.swing.JMenuItem undoMenuItem;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JCheckBox wrapCheckBox;
    // End of variables declaration//GEN-END:variables
}
